#include "color.hpp"
#include "core.hpp"
#include <cstring>

// XXX: The hex parsing could probably be done with fewer lines.

int from_hex(char c) {
  if (c >= '0' && c <= '9')
    return c - '0';
  else if (c >= 'A' && c <= 'F')
    return c - 'A' + 10;
  else if (c >= 'a' && c <= 'f')
    return c - 'a' + 10;
  else
    return -1;
}

void hex_set(char sixteens, char ones, Color::Color_Elt& target) {
  int num = from_hex(sixteens);
  if (num == -1) die("Bad hex value %c", sixteens);
  int num2 = from_hex(ones);
  if (num2 == -1) die("Bad hex value %c", ones);
  target = static_cast<Color::Color_Elt>((num << 4) + num2);
}

struct { const char* name; Color color; } named_colors[] = {
  {"alice blue", {0xf0, 0xf8, 0xff, 0xff}},
  {"antique white", {0xfa, 0xeb, 0xd7, 0xff}},
  {"aqua", {0x00, 0xff, 0xff, 0xff}},
  {"aquamarine", {0x7f, 0xff, 0xd4, 0xff}},
  {"azure", {0xf0, 0xff, 0xff, 0xff}},
  {"beige", {0xf5, 0xf5, 0xdc, 0xff}},
  {"bisque", {0xff, 0xe4, 0xc4, 0xff}},
  {"black", {0x00, 0x00, 0x00, 0xff}},
  {"blanched almond", {0xff, 0xeb, 0xcd, 0xff}},
  {"blue", {0x00, 0x00, 0xff, 0xff}},
  {"blue violet", {0x8a, 0x2b, 0xe2, 0xff}},
  {"brown", {0xa5, 0x2a, 0x2a, 0xff}},
  {"burlywood", {0xde, 0xb8, 0x87, 0xff}},
  {"cadet blue", {0x5f, 0x9e, 0xa0, 0xff}},
  {"chartreuse", {0x7f, 0xff, 0x00, 0xff}},
  {"chocolate", {0xd2, 0x69, 0x1e, 0xff}},
  {"coral", {0xff, 0x7f, 0x50, 0xff}},
  {"cornflower", {0x64, 0x95, 0xed, 0xff}},
  {"cornsilk", {0xff, 0xf8, 0xdc, 0xff}},
  {"crimson", {0xdc, 0x14, 0x3c, 0xff}},
  {"cyan", {0x00, 0xff, 0xff, 0xff}},
  {"dark blue", {0x00, 0x00, 0x8b, 0xff}},
  {"dark cyan", {0x00, 0x8b, 0x8b, 0xff}},
  {"dark goldenrod", {0xb8, 0x86, 0x0b, 0xff}},
  {"dark gray", {0xa9, 0xa9, 0xa9, 0xff}},
  {"dark green", {0x00, 0x64, 0x00, 0xff}},
  {"dark khaki", {0xbd, 0xb7, 0x6b, 0xff}},
  {"dark magenta", {0x8b, 0x00, 0x8b, 0xff}},
  {"dark olive green", {0x55, 0x6b, 0x2f, 0xff}},
  {"dark orange", {0xff, 0x8c, 0x00, 0xff}},
  {"dark orchid", {0x99, 0x32, 0xcc, 0xff}},
  {"dark red", {0x8b, 0x00, 0x00, 0xff}},
  {"dark salmon", {0xe9, 0x96, 0x7a, 0xff}},
  {"dark sea green", {0x8f, 0xbc, 0x8f, 0xff}},
  {"dark slate blue", {0x48, 0x3d, 0x8b, 0xff}},
  {"dark slate gray", {0x2f, 0x4f, 0x4f, 0xff}},
  {"dark turquoise", {0x00, 0xce, 0xd1, 0xff}},
  {"dark violet", {0x94, 0x00, 0xd3, 0xff}},
  {"deep pink", {0xff, 0x14, 0x93, 0xff}},
  {"deep sky blue", {0x00, 0xbf, 0xff, 0xff}},
  {"dim gray", {0x69, 0x69, 0x69, 0xff}},
  {"dodger blue", {0x1e, 0x90, 0xff, 0xff}},
  {"firebrick", {0xb2, 0x22, 0x22, 0xff}},
  {"floral white", {0xff, 0xfa, 0xf0, 0xff}},
  {"forest green", {0x22, 0x8b, 0x22, 0xff}},
  {"fuchsia", {0xff, 0x00, 0xff, 0xff}},
  {"gainsboro", {0xdc, 0xdc, 0xdc, 0xff}},
  {"ghost white", {0xf8, 0xf8, 0xff, 0xff}},
  {"gold", {0xff, 0xd7, 0x00, 0xff}},
  {"goldenrod", {0xda, 0xa5, 0x20, 0xff}},
  {"gray", {0xbe, 0xbe, 0xbe, 0xff}},
  {"green", {0x00, 0xff, 0x00, 0xff}},
  {"green yellow", {0xad, 0xff, 0x2f, 0xff}},
  {"honeydew", {0xf0, 0xff, 0xf0, 0xff}},
  {"hot pink", {0xff, 0x69, 0xb4, 0xff}},
  {"indian red", {0xcd, 0x5c, 0x5c, 0xff}},
  {"indigo", {0x4b, 0x00, 0x82, 0xff}},
  {"ivory", {0xff, 0xff, 0xf0, 0xff}},
  {"khaki", {0xf0, 0xe6, 0x8c, 0xff}},
  {"lavender", {0xe6, 0xe6, 0xfa, 0xff}},
  {"lavender blush", {0xff, 0xf0, 0xf5, 0xff}},
  {"lawn green", {0x7c, 0xfc, 0x00, 0xff}},
  {"lemon chiffon", {0xff, 0xfa, 0xcd, 0xff}},
  {"light blue", {0xad, 0xd8, 0xe6, 0xff}},
  {"light coral", {0xf0, 0x80, 0x80, 0xff}},
  {"light cyan", {0xe0, 0xff, 0xff, 0xff}},
  {"light goldenrod", {0xfa, 0xfa, 0xd2, 0xff}},
  {"light gray", {0xd3, 0xd3, 0xd3, 0xff}},
  {"light green", {0x90, 0xee, 0x90, 0xff}},
  {"light pink", {0xff, 0xb6, 0xc1, 0xff}},
  {"light salmon", {0xff, 0xa0, 0x7a, 0xff}},
  {"light sea green", {0x20, 0xb2, 0xaa, 0xff}},
  {"light sky blue", {0x87, 0xce, 0xfa, 0xff}},
  {"light slate gray", {0x77, 0x88, 0x99, 0xff}},
  {"light steel blue", {0xb0, 0xc4, 0xde, 0xff}},
  {"light yellow", {0xff, 0xff, 0xe0, 0xff}},
  {"lime green", {0x32, 0xcd, 0x32, 0xff}},
  {"linen", {0xfa, 0xf0, 0xe6, 0xff}},
  {"magenta", {0xff, 0x00, 0xff, 0xff}},
  {"maroon", {0xb0, 0x30, 0x60, 0xff}},
  {"medium aquamarine", {0x66, 0xcd, 0xaa, 0xff}},
  {"medium blue", {0x00, 0x00, 0xcd, 0xff}},
  {"medium orchid", {0xba, 0x55, 0xd3, 0xff}},
  {"medium purple", {0x93, 0x70, 0xdb, 0xff}},
  {"medium sea green", {0x3c, 0xb3, 0x71, 0xff}},
  {"medium slate blue", {0x7b, 0x68, 0xee, 0xff}},
  {"medium spring green", {0x00, 0xfa, 0x9a, 0xff}},
  {"medium turquoise", {0x48, 0xd1, 0xcc, 0xff}},
  {"medium violet red", {0xc7, 0x15, 0x85, 0xff}},
  {"midnight blue", {0x19, 0x19, 0x70, 0xff}},
  {"mint cream", {0xf5, 0xff, 0xfa, 0xff}},
  {"misty rose", {0xff, 0xe4, 0xe1, 0xff}},
  {"moccasin", {0xff, 0xe4, 0xb5, 0xff}},
  {"navajo white", {0xff, 0xde, 0xad, 0xff}},
  {"navy", {0x00, 0x00, 0x80, 0xff}},
  {"old lace", {0xfd, 0xf5, 0xe6, 0xff}},
  {"olive", {0x80, 0x80, 0x00, 0xff}},
  {"olive drab", {0x6b, 0x8e, 0x23, 0xff}},
  {"orange", {0xff, 0xa5, 0x00, 0xff}},
  {"orange red", {0xff, 0x45, 0x00, 0xff}},
  {"orchid", {0xda, 0x70, 0xd6, 0xff}},
  {"pale goldenrod", {0xee, 0xe8, 0xaa, 0xff}},
  {"pale green", {0x98, 0xfb, 0x98, 0xff}},
  {"pale turquoise", {0xaf, 0xee, 0xee, 0xff}},
  {"pale violet red", {0xdb, 0x70, 0x93, 0xff}},
  {"papaya whip", {0xff, 0xef, 0xd5, 0xff}},
  {"peach puff", {0xff, 0xda, 0xb9, 0xff}},
  {"peru", {0xcd, 0x85, 0x3f, 0xff}},
  {"pink", {0xff, 0xc0, 0xcb, 0xff}},
  {"plum", {0xdd, 0xa0, 0xdd, 0xff}},
  {"powder blue", {0xb0, 0xe0, 0xe6, 0xff}},
  {"purple", {0xa0, 0x20, 0xf0, 0xff}},
  {"red", {0xff, 0x00, 0x00, 0xff}},
  {"rosy brown", {0xbc, 0x8f, 0x8f, 0xff}},
  {"royal blue", {0x41, 0x69, 0xe1, 0xff}},
  {"saddle brown", {0x8b, 0x45, 0x13, 0xff}},
  {"salmon", {0xfa, 0x80, 0x72, 0xff}},
  {"sandy brown", {0xf4, 0xa4, 0x60, 0xff}},
  {"sea green", {0x2e, 0x8b, 0x57, 0xff}},
  {"seashell", {0xff, 0xf5, 0xee, 0xff}},
  {"sienna", {0xa0, 0x52, 0x2d, 0xff}},
  {"silver", {0xc0, 0xc0, 0xc0, 0xff}},
  {"sky blue", {0x87, 0xce, 0xeb, 0xff}},
  {"slate blue", {0x6a, 0x5a, 0xcd, 0xff}},
  {"slate gray", {0x70, 0x80, 0x90, 0xff}},
  {"snow", {0xff, 0xfa, 0xfa, 0xff}},
  {"spring green", {0x00, 0xff, 0x7f, 0xff}},
  {"steel blue", {0x46, 0x82, 0xb4, 0xff}},
  {"tan", {0xd2, 0xb4, 0x8c, 0xff}},
  {"teal", {0x00, 0x80, 0x80, 0xff}},
  {"thistle", {0xd8, 0xbf, 0xd8, 0xff}},
  {"tomato", {0xff, 0x63, 0x47, 0xff}},
  {"turquoise", {0x40, 0xe0, 0xd0, 0xff}},
  {"violet", {0xee, 0x82, 0xee, 0xff}},
  {"wheat", {0xf5, 0xde, 0xb3, 0xff}},
  {"white", {0xff, 0xff, 0xff, 0xff}},
  {"white smoke", {0xf5, 0xf5, 0xf5, 0xff}},
  {"yellow", {0xff, 0xff, 0x00, 0xff}},
  {"yellow green", {0x9a, 0xcd, 0x32, 0xff}},
  {nullptr, {0, 0, 0, 0}}
};

Color::Color(const char* desc)
    : r(0), g(0), b(0), a(255) {
  if (strlen(desc) == 4 && desc[0] == '#') {
    // #RGB format.
    hex_set(desc[1], desc[1], r);
    hex_set(desc[2], desc[2], g);
    hex_set(desc[3], desc[3], b);
    return;
  }

  if (strlen(desc) == 5 && desc[0] == '#') {
    // #RGBA format.
    hex_set(desc[1], desc[1], r);
    hex_set(desc[2], desc[2], g);
    hex_set(desc[3], desc[3], b);
    hex_set(desc[4], desc[4], a);
    return;
  }

  if (strlen(desc) == 7 && desc[0] == '#') {
    // #RRGGBB format.
    hex_set(desc[1], desc[2], r);
    hex_set(desc[3], desc[4], g);
    hex_set(desc[5], desc[6], b);
    return;
  }

  if (strlen(desc) == 9 && desc[0] == '#') {
    // #RRGGBBAA format.
    hex_set(desc[1], desc[2], r);
    hex_set(desc[3], desc[4], g);
    hex_set(desc[5], desc[6], b);
    hex_set(desc[7], desc[8], a);
    return;
  }

  // Check for named color
  for (int i = 0; named_colors[i].name; i++) {
    if (strcmp(named_colors[i].name, desc) == 0) {
      *this = named_colors[i].color;
      return;
    }
  }

  die("Unknown color description %s", desc);
}
